{{- $open_api_config := toYaml .Values.app.openapi_config -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "plater.fullname" . }}-configmap
  labels:
    {{- include "plater.labels" . | nindent 4 }}
data:
  check_neo.sh: |-
    #!/bin/sh
    response=$(wget --server-response --spider --quiet "http://${NEO4J_HOST}:${NEO4J_HTTP_PORT}" 2>&1 | awk 'NR==1{print $2}')
    until [ "$response" = "200" ]; do
        response=$(wget --server-response --spider --quiet "http://${NEO4J_HOST}:${NEO4J_HTTP_PORT}" 2>&1 | awk 'NR==1{print $2}') >&2
        echo "  -- Neo4j  is unavailable - sleeping"
        sleep 3
    done
  download_data.sh: |-
    #!/bin/bash
    set -x
    wget -O /data/db.dump ${NEO4J_DATA_URL}
    touch /data/done
  seed_db.sh: |-
    #!/bin/bash
    set -x
    FILE=/data/db.dump
    DATADIR=/data/databases
    until [ -f "$FILE" ]; do
        echo "$FILE doesn't exist. Please copy to database dump file to $FILE"
        echo "sleeping..."
        sleep 3
    done
    echo "$FILE found"
    echo "clearing previous database file if any..."
    # Make dir if they don't exist
    mkdir -p /data/databases
    mkdir -p /data/transactions
    mkdir -p /data/dbms
    # clear out data from dir if they were present
    rm -rf /data/dbms/*
    rm -rf /data/databases/*
    rm -rf /data/transactions/*
    # load dump file
    neo4j-admin load --from $FILE
  {{ if .Values.csvFiles }}
  seed_db_csv.sh: |-
    #!/bin/bash
    set -x
    # make new csv dir
    {{ $dataDir := "/data/csv/" }}
    mkdir -p {{ $dataDir }}
    mkdir -p /data/databases
    rm -rf /data/databases/*
    # clear out previous data if there
    rm -rf  {{ $dataDir }}*
    {{ $baseUrl := .Values.csvFiles.baseUrl }}

    # download node files and build neo4j nodes parameters

    {{ $neo4jFileParameter := "" }}

    {{ range .Values.csvFiles.nodeFiles }}
       # {{ required "One of the .Values.csvFiles.nodeFiles entry is missing `data` attribute" .data }}
       {{ $currentParameter := "" }}
       {{ if .header }}
         wget -O {{ $dataDir }}{{ .header }} {{ $baseUrl }}{{ .header }}
         {{ $currentParameter = printf "--nodes=%s%s," $dataDir .header }}
       {{ else }}
         {{ $currentParameter = printf "--nodes=" }}
       {{ end }}
     wget -O {{ $dataDir }}{{ .data }} {{ $baseUrl }}{{ .data }}
       {{ $currentParameter = printf "%s%s%s " $currentParameter $dataDir .data }}
       {{ $neo4jFileParameter = printf "%s%s" $neo4jFileParameter $currentParameter }}
    {{ end }}
    {{ $neo4jFileParameter }}

    # download edge files and builder neo4j edges parameters

    {{ range .Values.csvFiles.edgeFiles }}
       # {{ required "One of the .Values.csvFiles.edgeFiles entry is missing `data` attribute" .data }}
       {{ $currentParameter := "" }}
       {{ if .header }}
       wget -O {{ $dataDir }}{{ .header }} {{ $baseUrl }}{{ .header }}
       {{ $currentParameter = printf "--relationships=%s%s," $dataDir .header }}
       {{ else }}
       {{ $currentParameter = printf "--relationships=" }}
       {{ end }}
       wget -O {{ $dataDir }}{{ .data }} {{ $baseUrl }}{{ .data }}
       {{ $currentParameter = printf "%s%s%s " $currentParameter $dataDir .data }}
       {{ $neo4jFileParameter = printf "%s%s" $neo4jFileParameter $currentParameter }}
    {{ end }}

    # Compile neo4j load script
    neo4j-admin import --database={{ .Values.csvFiles.dbName }} {{ $neo4jFileParameter }} {{ .Values.csvFiles.additionalParams }}
   {{ end }}
  dataset-desc.json: |
    {{ .Values.datasetDesc | toJson }}
  openapi-config.yaml: |-
{{ tpl $open_api_config . | indent 4 }}
  skip-attr.json: |
    {{ .Values.skipAttributes | toJson }}