pipeline {
    agent {
        kubernetes {
            cloud 'kubernetes'
            yaml '''
              apiVersion: v1
              kind: Pod
              spec:
                containers:
                - name: agent-docker
                  image: helxplatform/agent-docker:latest
                  command:
                  - cat
                  tty: true
                  volumeMounts:
                    - name: dockersock
                      mountPath: "/var/run/docker.sock"
                volumes:
                - name: dockersock
                  hostPath:
                    path: /var/run/docker.sock
            '''
        }
    }
    environment {
        EMAIL_RECIPIENTS = params.email_recipients
    }
    stages {
        stage('test') {
            steps {
                script {
                    env.SERVER_URL = params.server_to_test
                    env.ARTILLERY_CONF = params.test_spec
                }
                container('agent-docker') {
                    sh '''
                    cd monitoring
                    echo server : $SERVER_URL
                    echo test_spec: $ARTILLERY_CONF
                    chmod +x -R ./run_test.sh
                    ./run_test.sh -t $ARTILLERY_CONF -s $SERVER_URL
                    '''
                }
            }
        }
    }
    post {
        always {
            archiveArtifacts 'monitoring/report*'
            publishHTML (target : [allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'monitoring',
                        reportFiles: 'report.html',
                        reportName: 'Report',
                        reportTitles: 'Artillery Report'])
        }
        failure {

            emailext (
            subject: "Translator service warn (${env.SERVER_URL})",
            to: "${EMAIL_RECIPIENTS}",
            body: "Some monitoring checks failed. Please view report here (https://stars.renci.org/var/translator-monitoring/reports/${env.JOB_BASE_NAME}-${env.BUILD_NUMBER}.html)",
            mimeType: 'text/html'
            )
            script {

                withCredentials([sshUserPrivateKey(credentialsId: 'stars-user', keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'userName')]) {
                    def remote = [:]
                    remote.name = "stars"
                    remote.user = userName
                    remote.identityFile = identity
                    remote.allowAnyHosts = true
                    remote.host = "stars.renci.org"
                    def remote_file_name = env.JOB_BASE_NAME + "-" + env.BUILD_NUMBER + ".html"
                    sshPut remote: remote, from: 'monitoring/report.html', into: "/projects/stars/var/translator-monitoring/reports/" + remote_file_name
                }
            }

        }
    }
}