pipeline {
    options {
        timestamps()
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    agent {
        node { label 'translator && prod && deploy' }
    }
    parameters {
        string(name: 'BUILD_VERSION', defaultValue: '', description: 'The build version to deploy (mandatory)')
        choice(name: 'PLATERS', choices: 'all\nbiolink\nchemical-normalization\ncord19\ncovid-phenotypes\ncovidkopkg\nctd\ndrugcentral\nfoodb\ngtex\ngtopdb\ngwas-catalog\nhetio\nhgnc\nhmdb\nhuman-goa\nintact\nmolepro-fda\nmychem\nontological-hierarchy\npanther\npharos\nrobokopkg\ntextminingkp\ntopmed\nuberongraph\nviral-proteome\nicees-kg', description: 'Platers to deploy')
        choice(name: 'LOAD_DATA', choices: 'no\nyes', description: 'Load data or not, default no')
        choice(name: 'ACTION', choices: 'install\ndelete', description: 'Install or delete, default install')
        string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'AWS Region to deploy')
        string(name: 'KUBERNETES_CLUSTER_NAME', defaultValue: 'translator-eks-prod-blue-cluster', description: 'AWS EKS that will host this application')
    }
    environment {
        DEPLOY_ENV = "prod"
    }
    stages {
        stage('Clean and checkout') {
            steps {
                script {
                    if (params.BUILD_VERSION == '') {
                        currentBuild.result = 'ABORTED'
                        error('BUILD_VERSION not set')
                    }
                }
                cleanWs()
                checkout scm
            }
        }
        stage('Deploy') {
            steps {
                configFileProvider([
                    configFile(fileId: 'prepare.sh', targetLocation: 'prepare.sh')
                ]){
                withEnv([
                    "BUILD_VERSION_PLATER=" + params.BUILD_VERSION.tokenize("#")[0],
                    "BUILD_VERSION_NEO4J=" + params.BUILD_VERSION.tokenize("#")[1]
                ]) {
                sh '''
                    aws --region ${AWS_REGION} eks update-kubeconfig --name ${KUBERNETES_CLUSTER_NAME}
                    /bin/bash prepare.sh
                   '''
                    }
                }
            }
        }
    }
}
