pipeline {
    options {
        timestamps()
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    agent {
        node { label 'translator && aws && build' }
    }
    parameters {
        string(name: 'BUILD_VERSION', defaultValue: '', description: 'The build version to deploy, including -trapi-1.2 suffix (optional)')
        string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'AWS Region to deploy')
        string(name: 'KUBERNETES_CLUSTER_NAME', defaultValue: 'translator-eks-ci-blue-cluster', description: 'AWS EKS that will host this application')
    }
    triggers {
        pollSCM('H/2 * * * *')
    }
    environment {
        DEPLOY_ENV = "ci"
    }
    stages {
        stage('Clean') {
            steps {
                cleanWs()
                checkout scm
            }
        }
        stage('Build Version') {
            when {
                allOf {
                    expression {
                        return !params.BUILD_VERSION
                    }
                    anyOf {
                        changeset "helm/cam-kp-api/*"
                        triggeredBy 'UserIdCause'
                    }
                }
            }
            steps{
               script {
                   def imageMeta  = readYaml file: 'helm/cam-kp-api/ncats-images-meta.yaml'
                   env.ORIGINAL_REPO = imageMeta.camKpApi.image
                   env.BUILD_VERSION = imageMeta.camKpApi.version
                   currentBuild.displayName = imageMeta.camKpApi.version
              }
           }
        }
        stage('build') {
            when {
                allOf {
                    expression {
                        return !params.BUILD_VERSION
                    }
                    anyOf {
                        changeset "helm/cam-kp-api/*"
                        triggeredBy 'UserIdCause'
                    }
                }
            }
            steps {
                withEnv([
                    "IMAGE_NAME=translator-cam-kp-api",
                    "BUILD_VERSION=" + (params.BUILD_VERSION ?: env.BUILD_VERSION)
                ]) {
                    dir("helm/cam-kp-api") {
                        script {

                            sh '''
                                docker pull $ORIGINAL_REPO:$BUILD_VERSION
                                docker tag $ORIGINAL_REPO:$BUILD_VERSION 853771734544.dkr.ecr.us-east-1.amazonaws.com/$IMAGE_NAME:$BUILD_VERSION
                               '''
                            def image = docker.image("853771734544.dkr.ecr.us-east-1.amazonaws.com/$IMAGE_NAME:$BUILD_VERSION")
                            sh '''
                                aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin  853771734544.dkr.ecr.us-east-1.amazonaws.com
                               '''
                                image.push(env.BUILD_VERSION)
                        }
                    }
                }
            }
        }
        stage('Deploy') {
            agent {
                label 'translator && ci && deploy'
            }
            when {
                anyOf {
                    changeset "helm/cam-kp-api/*"
                    triggeredBy 'UserIdCause'
                }
            }
            environment {
                APP = "cam-kp-api"
            }
            steps {
                checkout scm
                dir("helm/cam-kp-api") {
                    configFileProvider([
                        configFile(fileId: 'prepare.sh', targetLocation: 'prepare.sh'),
                        configFile(fileId: 'values-ci.yaml', targetLocation: 'values-ncats.yaml')
                    ]){
                    sh '''
                        aws --region ${AWS_REGION} eks update-kubeconfig --name ${KUBERNETES_CLUSTER_NAME}
                        /bin/bash prepare.sh
                        /bin/bash deploy.sh  
                       '''
                    }
                }
            }
            post {
                always {
                    echo " Clean up the workspace in deploy node!"
                    cleanWs()
                }
            }
        }      
    }
}
