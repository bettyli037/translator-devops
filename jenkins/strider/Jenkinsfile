pipeline {
    options {
        timestamps()
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    agent {
        node { label 'translator && aws && build' }
    }
    parameters {
        string(name: 'BUILD_VERSION', defaultValue: '', description: 'The build version to deploy (optional)')
        string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'AWS Region to deploy')
        string(name: 'KUBERNETES_CLUSTER_NAME', defaultValue: 'translator-eks-ci-blue-cluster', description: 'AWS EKS that will host this application')
    }
    triggers {
        pollSCM('H/2 * * * *')
    }
    stages {
        stage('Clean') {
            steps {
                cleanWs()
                checkout scm
            }
        }
        stage('Build Version - strider') {
            when {
                allOf {
                    expression {
                        return !params.BUILD_VERSION
                        return !params.BUILD_VERSION_KP
                    }
                    anyOf {
                        changeset "helm/strider/*"
                        triggeredBy 'UserIdCause'
                    }
                }
            }
            steps{
                script {
                    script {
                        def imageMeta = readYaml file: 'helm/strider/ncats-images-meta.yaml'
                        env.ORIGINAL_REPO = imageMeta.strider.image
                        env.BUILD_VERSION = imageMeta.strider.version
                        env.ORIGINAL_REPO_KP = imageMeta.kpRegistry.image
                        env.BUILD_VERSION_KP = imageMeta.kpRegistry.version
                        currentBuild.displayName = imageMeta.strider.version + "#" + imageMeta.kpRegistry.version
                    }
                }
            }
        }
        stage('build - strider') {
            when {
                allOf {
                    expression {
                        return !params.BUILD_VERSION
                    }
                    anyOf {
                        changeset "helm/strider/*"
                        triggeredBy 'UserIdCause'
                    }
                }
            }
            steps {
                withEnv([
                    "IMAGE_NAME=translator-strider",
                    "BUILD_VERSION=" + (params.BUILD_VERSION ? params.BUILD_VERSION.tokenize("#")[0] : env.BUILD_VERSION)
                ]) {
                    dir("helm/strider") {
                        script {

                            sh '''
                            docker pull $ORIGINAL_REPO:$BUILD_VERSION
                            docker tag $ORIGINAL_REPO:$BUILD_VERSION 853771734544.dkr.ecr.us-east-1.amazonaws.com/$IMAGE_NAME:$BUILD_VERSION
                            '''
                            def image = docker.image("853771734544.dkr.ecr.us-east-1.amazonaws.com/$IMAGE_NAME:$BUILD_VERSION")
                            docker.withRegistry('https://853771734544.dkr.ecr.us-east-1.amazonaws.com', 'ecr:us-east-1:aws-ifx-deploy') {
                                image.push()
                            }
                        }
                    }
                }
                withEnv([
                    "IMAGE_NAME=translator-kp-registry",
                    "BUILD_VERSION_KP=" + (params.BUILD_VERSION ? params.BUILD_VERSION.tokenize("#")[1] : env.BUILD_VERSION_KP)
                ]) {
                    dir("helm/strider") {
                        script {

                            sh '''
                            docker pull $ORIGINAL_REPO_KP:$BUILD_VERSION_KP
                            docker tag $ORIGINAL_REPO_KP:$BUILD_VERSION_KP 853771734544.dkr.ecr.us-east-1.amazonaws.com/$IMAGE_NAME:$BUILD_VERSION_KP
                            '''
                            def image = docker.image("853771734544.dkr.ecr.us-east-1.amazonaws.com/$IMAGE_NAME:$BUILD_VERSION_KP")

                            sh '''
                            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin  853771734544.dkr.ecr.us-east-1.amazonaws.com
                            '''
                                image.push()
                        }
                    }
                }
            }
        }
        stage('Deploy') {
            agent {
                label 'translator && ci && deploy'
            }
            when {
                anyOf {
                    changeset "helm/strider/*"
                    triggeredBy 'UserIdCause'
                }
            }
            environment {
              APP = "strider"
            }
            dir("helm/strider") {
                steps {
                    configFileProvider([
                        configFile(fileId: 'prepare.sh', targetLocation: 'prepare.sh')
                    ]){
                    withEnv([
                        "BUILD_VERSION_STRIDER=" + (params.BUILD_VERSION ? params.BUILD_VERSION.tokenize("#")[0] : env.BUILD_VERSION),
                        "BUILD_VERSION_KP=" + (params.BUILD_VERSION ? params.BUILD_VERSION.tokenize("#")[1] : env.BUILD_VERSION_KP),
                    ]) {
                        sh '''
                            aws --region ${AWS_REGION} eks update-kubeconfig --name ${KUBERNETES_CLUSTER_NAME}

                            /bin/bash prepare.sh
                           '''
                            }
                        }
                    }
                }
            }
        }
    }
}
